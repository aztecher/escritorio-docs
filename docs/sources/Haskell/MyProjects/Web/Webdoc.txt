======================
Webdoc
======================

TL;DR
======

| SphinxドキュメントのWeb提供環境の構築
| 及びAPIやCLIツール等の提供によるドキュメント環境の整備プロジェクト

AIM
====

1. ドキュメント管理の一元化を行う.
2. ドキュメントをまとめ上げることでドキュメントの分散化を防ぐ.
3. 他のドキュメント間のリンクを可能とする.
4. 1-3により, ドキュメント作成意欲の向上を狙う.
5. その他, ボイラープレートとなる作業をCLIにより簡略化する.
6. 以上を満たすサービスをHaskellで構築し, Haskell力の向上を狙う.

Technical Impovement
=====================

1. CLIツールを作るため, パーサーコンビネータ周りの知見が手に入る.
2. Webサービスを主軸に置き, ライブラリは Servant を利用して知見を得る.
3. TDDにより, Haskellのテスト周りの知見を得る.
4. 最終的に, CI/CD (Concourse) 環境を構築しながら開発を行う.
5. CI/CDにおけるテストコード等もHaskellで書き(turtle), 知見を得る.


Structure
===========

Server
-------

| 構造は単純なClient-Serverモデルである. (というかむしろそこまで行かない)
| サーバーを立て, そのサーバーの各エンドポイントで対応するSphinxのhtmlを返す.
| (最悪, RootがSphinxのドキュメントルートindex.htmlを読んでいればいい説)
| APIも一応提供するが用途が現状不明なので割と後回しでいい.

API
^^^^^

| (APIの設計を行う場合はここに記述していく)

Client
-------

| Client-ServerモデルのWebサービスなので, 基本的に閲覧機能に関してはBrowserに一任する.
| ただし, ClientはCLIツールを利用することで編集操作等を簡単に行うことができる.
| ...ような設計にしたいが, 具体的になにがどうなるとどう良くなるかまでの見通しが立っていない.


CLI
^^^^^

.. blockdiag::

    blockdiag {
        webdoc -> server -> start
        webdoc -> server -> stop
        webdoc -> server -> restart
        webdoc -> new -> documents
        webdoc -> new -> api
        webdoc -> new -> page
        webdoc -> help
        webdoc -> version
    }


+---------+-----------------------------------------+
| Options | Descriptions                            |
+=========+=========================================+
| server  | WebDoc Serverの動作を変更する           |
+---------+-----------------------------------------+
| new     | ドキュメント・API・Wikiページの自動作成 |
+---------+-----------------------------------------+
| help    | ヘルプ(usage)を表示する                 |
+---------+-----------------------------------------+
| version | バージョン情報の出力                    |
+---------+-----------------------------------------+



