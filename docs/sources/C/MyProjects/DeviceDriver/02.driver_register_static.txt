=================================
02. Driver Register (Static)
=================================

今回は, 古い方法でユーザがデバイスドライバにアクセスできるようにする.
前回の内容に加え, プログラムやシェルからopen/closeして, 値をread/writeできるようにする.

そのために, open/close/read/write といったシステムコール用の処理を実装する.
また, ユーザはデバイスファイル(/dev/XXX)として本デバイスドライバにアクセスするため, カーネルへのデバイス登録を行う.

今回は決め打ちで静的に登録するという, 古い方法を利用する.

参考URL

* 組み込みLinuxデバイスドライバの作り方_

Makefile
=========

特定の名前のソースファイルから, 特定の名前のカーネルモジュールを作成するようにMakefileを編集する.


ソースコードの解説
====================

システムコール用ハンドラの定義と設定
-------------------------------------

ユーザからのシステムコール(open, close, read, write)に対応するハンドラ関数を定義する.
そして, 作成したハンドラ関数を `file_operations` 構造体(:doc:`./../../Library/Kernel/linux/fs.h` で定義されている)に追加する.
この際, C99で実装されたイニシャライザーによって, 特定のフィールド名を指定してハンドラを登録するといい. (これを使わないと, それ以外の `file_operations` のフィールドをNULL埋めした状態での定義が必要になる)

定義する関数の戻り値や引数は言わずもがな, `file_operations` 構造体のフィールドとして定義されている関数と一致させないと行けない. すなわち,

::

    open    -> int (*open) (struct inode *, struct file *)
    release -> int (*release) (struct inode *, struct file *)
    read    -> ssize_t (read) (struct file *, char __user *, size_t, loff_t *)
    write   -> ssize_t (write) (struct file *, const char __user *, size_t, loff_t *)

このような関数を定義する.
(ただし, 当然だが必ずしも引数を値などを利用する必要はない)

各種構造体及びマクロは以下のように定義されている.

* inode   : :doc:`./../../Library/Kernel/linux/fs.h`
* file    : :doc:`./../../Library/Kernel/linux/fs.h`
* __user  : :doc:`./../../Library/Kernel/linux/compiler-types.h`
* size_t  : :doc:`./../../Library/Kernel/linux/types.h`
* ssize_t : :doc:`./../../Library/Kernel/linux/types.h`
* loff_t  : :doc:`./../../Library/Kernel/linux/types.h`

`init.h` によって, `types.h`, `compiler.h` -> `compiler-types` が読まれる.
`module.h` によって, `init.h`, `compiler.h` -> `compiler-types` が読まれれる.
`fs.h` は依存関係にないので少なくともインクルードしておいたほうがいい.

今はひとまず, ログを出したり, 固定値を返すだけの関数を定義して `file_operations` 構造体に追加する.


カーネルにドライバを登録する
------------------------------

モジュールがロードされるタイミング, つまり `mydevice_init` の中で, `register_chrdev` 関数によって, 本デバイスドライバをキャラクターデバイスとしてカーネルに登録する. ( :doc:`./../../Library/Kernel/linux/fs.h` に定義してある)

メジャー番号とは, 本デバイスを特定するのに使われる重要な番号であり, ローカル実験用に60〜63, 120〜127, 240〜254がreservedされている.

登録を解除するには, `unregister_chrdev` を呼び出し, ドライバを開放する.

インクルード
--------------

上記で見たとおり, 本当はURL先のソースコードのように多くのライブラリをインポートしなくても動作する(先を見越してインポートしているものもあるが).
ただし, これは一見わかりにくい(なぜ関数定義がhoge.hなのに, fuga.h(内部的にhoge.hをインポートしている)をインポートするだけでいいのか?など)こともあり, 本当であれば定義されているファイルをちゃんと読み込んだほうがいいだろう.
ただ, 初学では何が必要で何が不必要かわからなくなるため, なんとも言えないなというのが個人的な感想.
とはいえ, この程度の内容を確認するにも時間がかかる(とっくにカーネルのプログラムは膨大なので)ため, 重複云々よりも判り易いに特化したほうがいいのかもしれない.

一応記しておくと, 上記URLと全く同じソースコードは, `#include<linux/module.h>` と `#include<linux/fs.h>` のインポートでビルドできた.

ビルドしてロード
------------------

ビルドしてロードすると, :doc:`./../../Library/Kernel/linux/fs.h` にも記述してあるが, `register_chrdev` 関数で登録する際に引数として渡したメジャー番号と名前を, `/proc/devices` で確認できる.

デバイスファイルを作り, ユーザアクセスする
---------------------------------------------

作成したデバイスドライバに対して, デバイスファイルを使用してアクセスする.
そのためにまず, デバイスファイルを作成する.

`mknod` コマンドを利用し, `/dev/XXX` にデバイスファイル(スペシャルファイル)を作成する.

::

    mknod name type major minor

    * name : 作成するスペシャルファイル名
    * type : スペシャルファイルの種類
        * b : ブロック
        * c : キャラクタ
        * u : キャラクタ(バッファなし)
        * p : FIFO
    * major, minor : メジャー番号, マイナー番号

今回は, 以下のような感じでいい.
(名前は何でもいい, キャラクタデバイスなのでc, マイナー番号はひとまず1)

::

    sudo insmod /dev/mydevice c 63 1
    sudo chmod 666 /dev/mydevice


デバイスファイルができたのでシェルから読み書きしてみる.
(もちろん, `/dev/mydevice` をopenして, read/writeして, closeするようなプログラムを書いてもいい. 今回は簡単のためシェルから確認する.)

::

    echo 'a' > /dev/mydevice
    dmesg

コマンド発行後, dmesgでログを見ると, 実装したwrite用の関数が呼ばれているのが確認できる.
また, `cat /dev/mydevice` でコンソール上で延々と'A'を出力するはずである.
これは, `mydevice_read` 関数が常に値を返すため.

使い終わったら, デバイスドライバのアンロード及び,
デバイスファイルの削除を行う.

::

    sudo rmmod MyDeviceModule
    sudo rm /dev/mydevice



.. ==============================
.. リンク
.. ==============================

.. _組み込みLinuxデバイスドライバの作り方: https://qiita.com/take-iwiw/items/580ec7db2e88beeac3de
