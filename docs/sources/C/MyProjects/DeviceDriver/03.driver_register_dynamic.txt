=================================
03. Driver Register (Dynamic)
=================================

Staticにメジャー番号を設定して, カーネルに登録する方法は, 現在では推奨されていないようである.
今回はこれを動的に設定する.
また, udevの仕組みを利用して, デバイスファイルを自動で作成する.

参考URL

* 組み込みLinuxデバイスドライバの作り方_

多少の修正
=================

* カーネルモジュールのライセンスを示す必要がある. 本に倣い, 以下のようなライセンス設定を行う.
    * `MODULE_LICENSE("Dual BSD/GPL");`
    * このマクロは, :doc:`./../../Library/Kernel/linux/module.h` に記載されている.

* C99を明示的に使用するように, Makefileを修正する.


動的にメジャー番号を割り当てて, カーネルに登録する
====================================================

ソースコードの解説
--------------------

`mydevice_init` 関数(insmod用のハンドラ)内に以下のような登録処理を追加する.

1. `alloc_chrdev_region` 関数によって空いているメジャー番号を動的に取得する. その時, 本デバイスドライバが使うマイナー番号に関する情報も設定する.
2. `cdev_init` 関数によって, cdevオブジェクトを初期化する. 具体的には, システムコールハンドラ(open/close/read/write)のテーブルを登録する.
3. `cdev_add` 関数を利用して, 初期化したcdevオブジェクトをカーネルに登録する.

また, 開放処理も合わせて変更する.
1. `cdev_del` 関数によって, デバイスドライバをカーネルから取り除く.
2. `unregister_chrdev_region` 関数で, このデバイスドライバで使用していたメジャー番号の登録を取り除く.

上記の関数や構造体は以下に示す部分に定義されている.

* `alloc_chrdev_region`, `unregister_chrdev_region` : :doc:`./../../Library/Kernel/linux/fs.h`
* `cdev`, `cdev_init`, `cdev_add`, `cdev_del` : :doc:`./../../Library/Kernel/linux/cdev.h`
* `dev_t` : :doc:`./../../Library/Kernel/linux/types.h`

もう少し細かくコードを追っていく
----------------------------------

登録部分 (`mydevice_init` 関数)からみてみる.

まず, alloc_chrdev_region(&dev, MINOR_BASE(0), MINOR_NUM(2), DRIVER_NAME("MyDevice"))を呼び出し, charデバイス番号の範囲を割り当てる.
メジャー番号は動的に選択され, devの最初のマイナー番号とともに返される.
戻り値が0でない場合(負の値), エラーとなる.
この, dev構造体で, メジャー番号, マイナー番号を取り扱う.

ここで, MAJOR()を利用してメジャー番号を取得し, その値とマイナー番号の値を組み合わせてdev_t型のキャラクタデバイス番号を作成する (この処理は不要かもしれない)

次に, cdev_init(&mydevice_cdev, &s_mydevice_fops) を呼び出し, キャラクター型デバイスの初期化を行う. `cdev_init` 後の `mydevice_cdev` の要素である. `mydevice_cdev.owner` には `THIS_MODULE` を指定しているがこれはほぼテンプレと思っていいだろう. ここまでやって初期化である.

これでキャラクタ型デバイスに割り当てる番号(動的に取得した番号)と, 割り当てるデバイス(ハンドラセット済み)が手に入ったため, これをカーネルに登録すればいい.
cdev_add(&mydevice_cdev, dev, MINOR_NUM) を呼び出し, このデバイスドライバ(cdev)をカーネルに登録する. これでメジャー番号を動的に取得した `MyDevice` という名のデバイスドライバが作成される.

以上が, 登録部分である.

次に解放部分(`mydevice_exit`)である.
とはいえこちらは基本リソースの解放を行えばいいだけであるため単純である.

まず, 作成時と同様に MKDEV() を使って dev_t型の番号(dev)を作成する.

そして, cdev_del(&mydevice_cdev)を実行して, キャラクタ型デバイスの削除を行う.

最後に, このデバイスドライバで使用していたメジャー番号の登録を取り除くため, unregister_chrdev_region(dev, MINOR_NUM)によって, devからMINOR_NUMまでの範囲のデバイスの登録を取り除く.

以上により, 動的にデバイスを登録/解放することができるようになった.


ビルドしてロードする
----------------------

ビルド, ロードは同じなので省略するが, デバイスファイルの作成で少し考えなければいけない. `mknod` コマンドで作成するのだが, メジャー番号が動的に決定されるので, これまでのように静的な値を指定して作成することができない.
今回はメジャー番号を得るために, `/proc/devices` を参照しそこから `MyDevice` についているメジャー番号を頑張って引っ張ってくるわけである.

ここで, デバイスファイルは複数作成できるが, `cdev_add` 関数でデバイス数は2個だと指定しているため, 2個以上のデバイスファイルは作れても, openしたりアクセスしようとすると, `No such device or address` というエラーが出る.


マイナー番号ごとに処理を変える
--------------------------------

例えば, マイナー番号0(/dev/mydevice0)とマイナー番号1(/dev/mydevice1)で処理を変えたい時, read/writeハンドラ内で, マイナー番号を使って switch-case で処理を分けてもいいが, 登録するハンドラテーブルを分けることでも実現できる.

具体的には, `s_mydevice_fops` を処理を分けたいマイナー数分だけ用意する(例えば, `s_mydevice_fops0` と `s_mydevice_fops1`)
`struct cdev mydevice_cdev` を配列にして, `cdev_init()`, `cdev_add()`, `cdev_del()` で, 別々の設定をすることで対応できる.


udev対応して自動的にデバイスファイル(/dev/XXX)を作る
=========================================================

上記のようにデバイスファイルを手動で作るのはいささか面倒である.

Linuxには, udevという仕組みがあり, ドライバロード時に, `/sys/class/` にクラス登録をすると, `udevd` というデーモンがそれを検出して自動的にデバイスファイルを作ってくれる.
実装上は, 「ドライバロード時に, `/sys/class/` にクラス登録をする」という処理が追加で必要になる.

実際には, udevは プラグアンドプレイ_ 機能に使われるようである.

デバイスドライバモジュール(.ko)を特別な場所(`lib/modules/`)に置いておくと, デバイスが検出されたときに, 自動的に対応するデバイスドライバがロードされるらしい. そのため, insmodも本来は不要である.


ソースコードの解説
====================

さて, では `udev` を使って, 自動的にデバイスファイルを作成するようにする.
上述したことを踏まえ, `mydevice_init` と `mydevice_exit` を変更する.

1. デバイスドライバのクラスオブジェクトを定義しておき, `class_create` でデバイスのクラス登録をする. (`/sys/class/mydevice/` を作る)
2. `mydevice_init` 内に, `/sys/class/mydevice/mydevice*` を作る. この際に `device_create` 関数を利用する.
3. `mydevice_exit` 内に, `/sys/class/mydevice/mydevice*` を削除する. この際に `device_destroy` 関数を利用する.
4. `mydevice_exit` 内で, `class_destroy` を呼び出し, (`/sys/class/mydevice/` を削除する)

新たな `class`, `class_create`, `device_create`, `device_destroy` だろう.

* `class`, `class_create`, `device_create`, `device_destroy` : :doc:`./../../Library/Kernel/linux/device.h`
* `module` : :doc:`./../../Library/Kernel/linux/module.h`

上記のようにコードを修正することで, `/sys/class/mydevice/mydevice*/dev` が作られる. `udev` の仕組みによって, `/sys/class/mydevice/mydevice*/dev` の情報を基に自動的にデバイスファイル `/dev/mydevice*` が作られる.

ルールファイルの追加
----------------------

デバイスファイルを作ったあと, 手動でその権限を666に設定していた. これは上記のコードでも同じで, このままだと, 一般ユーザーではアクセス権限がない. そのため, ルールファイルを追加することで, アクセス権限を変更する. ルールファイルは, `/etc/udev/rules.d` にある. ルールファイル自体は数字から始まり, 拡張子は `.rules` のファイルなら何でも良いようだ. ラズパイの場合, はじめから `/etc/udev/rules.d/99-com.rules` というルールファイルがあるため, そこに追加しても良い.
ここでは一応分けて考える.

下記のコードで, ルールファイルを作成するが, `sudo` をつけても, 新規ファイルを作れなかったため, `sudo -i` で一度スーパーユーザーモードに入ってから以下のコマンドを打ち込む.

::

    sudo -i
    echo 'KERNEL=="mydevice[0-9]*", GROUP="root", MODE="0666"' >> /etc/udev/rules.d/81-my.rules
    exit

ビルドしてロードする
---------------------

ビルドしてinsmodしてみる.
今回は, insmodするだけで自動的にデバイスファイル(/dev/mydevice0, /dev/mydevice1) が作られる.


.. ==============================
.. リンク
.. ==============================

.. _組み込みLinuxデバイスドライバの作り方: https://qiita.com/take-iwiw/items/6b02494a3668f79800e6

