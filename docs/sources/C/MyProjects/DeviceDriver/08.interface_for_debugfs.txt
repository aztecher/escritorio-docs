=================================
08. interface for debugfs
=================================

参考URL

* 組み込みLinuxデバイスドライバの作り方_


前回, procfsを使用してデバドラのデバッグ用インターフェースを作成した. しかし, 本来 `procfs` はプロセスに関する情報を配置するところで, デバッグ用に使うことはよくない. デバッグ用には `debugfs` を使用することが推奨されている.

今回は前回と同じ事を, `debugfs` を使用して実装してみる. 具体的には,

`/sys/kernel/debug/MyDevice/prm1`

にアクセスすることで, デバッグ用のパラメータを読んだり書いたりできるようにする. なお, このパスは環境によって変わる可能性がある.

debugfs用インターフェースの実装
=================================

debugfs用インターフェースの作成方法は大きく2種類ある. それぞれの方法について記載する.

Method1: file_operationsを使用する
-------------------------------------

debugfs用インターフェースを作成するには, ドライバがロード(insmod)されるところで, `debugfs_create_file()` という関数によって, ファイル名とread/write時に呼んでほしい関数を登録するだけ. 登録するときには, `struct file_operations` テーブルにread/writeハンドラ関数を設定する. これは, 前回のprocfs, 通常のデバドラハンドラ登録と同じ.

しかし, これだとdebugfsアクセス用のファイルが, debugfsのルートディレクトリに作成されてしまう. 当然そこには他のカーネルモジュールのファイルもあるため, ディレクトリで整理する. debugfs用にディレクトリを作るには, `debugfs_create_dir()` を使う. `debigfs_create_dir()` の戻り値(entry)を, 先程の `debugfs_create_dir()` の第3引数に入れてあげることで, 作成したディレクトリの下にファイルが作られるようになる.

Method2: Helper関数を使用する
--------------------------------

デバッグ用にパラメータを読み書きしたいだけなのに, 毎回read/write関数を定義するのが面倒な場合がある. read/write操作だけが必要な場合には, ヘルパー関数1つでdebugfsを作ることができる. 例えば, 32-bitの変数にアクセスする場合には, `debugfs_create_u32()` を使用する. (定義はunsigned型だが, 一応負数の入力もできた). 16進数で読み書きしたい場合, `debugfs_create_x32()` にする. 他にも, bool型やレジスタセット(アドレスと数値), バイナリデータに使えるblob用の関数も用意されている. 今回はひとまず, 32bitの数値だけ扱う.

終了処理
---------

カーネルをアンロードするときに, 作成したdebugfsファイルを削除する必要がある. 削除するためには, `debugfs_remove()` を使用する. これで作成したファイルを削除できる. しかし一つ一つ消していくのは面倒である. 何より作成したときのentry情報を覚えておくのが面倒. そのため, `debugfs_remove_recursive()` が用意されている. この関数を作成したディレクトリのentry(`debugfs_create_dir()` の戻り値)を入れることで, その下のファイルも再帰的に削除してくれる)

コード
---------

(一応debugfs用のコード自体は記載していないので)コードを以下に記述しておく. デバッグ用のパラメータとして, `debug_prm1` をstaticで持っている. debugfsルートディレクトリの下につくる自分用のディレクトリは `MyDevice` にし, entry情報を `debug_entry_dir` に保持している.

.. code-block:: c

    /*
     * interface for debugfs
     *
     * Date :  2018.08.24
     * @author Mikiya Michishita
     */

    #include <linux/module.h>
    #include <linux/debugfs.h>
    #include <linux/fs.h>

    // Device Information
    MODULE_LICENSE("Dual BSD/GPL");
    #define DRIVER_NAME "MyDevice"

    // Debug variables
    struct dentry *debug_entry_dir;  // debugfsディレクトリのエントリ
    static int debug_prm1;           // デバッグ用パラメータ(テスト用)
    static int debug_read_size = 0;  // 1回のopenでreadするバイト数

    // /sys/kernel/debug/MyDevice/debug_prm1 にアクセスしたときに呼ばれる関数
    static int mydevice_debug_open(struct inode *inode, struct file *file)
    {
      printk("mydevice_proc_open\n");
      debug_read_size = 4; // 1回につき4byte readする
      return 0;
    }

    // /sys/kernel/debug/MyDevice/debug_prm1 のread時に呼ばれる関数
    static ssize_t mydevice_debug_read(struct file *filp, char __user *buf, size_t count, loff_t *f_pos)
    {
      printk("mydevice_proc_read\n");

      if (debug_read_size > 0) {
        // まだ出力すべきデータがあるとき.
        // 保持している整数型の数字(debug_prm1)を文字列で出力する.
        int len;
        len = sprintf(buf, "%d\n", debug_prm1); // 本当はcopy_to_userすべき
        debug_read_size -= 4;
        return len;
      } else {
        return 0;
      }
    }

    // /sys/kernel/debug/MyDevice/debug_prm1 のwrite時に呼ばれる関数
    static ssize_t mydevice_debug_write(struct file *filp, const char __user *buf, size_t count, loff_t *f_pos)
    {
      printk ("mydevice_proc_write\n");

      // 入力された文字列を整数型の数字(debug_prm1)として保持する.
      sscanf(buf, "%d", &debug_prm1);
      return count;
    }

    // debugfs用のハンドラテーブル
    static struct file_operations debug_debug_prm1_fops = {
      .owner = THIS_MODULE,
      .open = mydevice_debug_open,
      .read = mydevice_debug_read,
      .write = mydevice_debug_write,
    };

    // ロード(insmod)時に呼ばれる関数
    static int mydevice_init(void)
    {
      printk("mydevice_init\n");

      // debugfs用ディレクトリを作成する.
      debug_entry_dir = debugfs_create_dir(DRIVER_NAME, NULL);
      if (debug_entry_dir == NULL) {
        printk (KERN_ERR "debugfs_create_dir\n");
        return -ENOMEM;
      }

      // method1: ハンドラテーブル登録方式
      debugfs_create_file("prm1", S_IRUGO | S_IWUGO, debug_entry_dir, NULL, &debug_debug_prm1_fops);

      // method2: ヘルパー関数方式
      debugfs_create_u32("_prm1", S_IRUGO | S_IWUGO, debug_entry_dir, &debug_prm1);
      debugfs_create_x32("_prm1_hex", S_IRUGO | S_IWUGO, debug_entry_dir, &debug_prm1);

      return 0;
    }

    // アンロード(rmmod)時に呼ばれる関数
    static void mydevice_exit(void)
    {
      printk("mydevice_exit\n");

      // debugfs用を取り除く(子ファイルも自動的に削除される)
      debugfs_remove_recursive(debug_entry_dir);
    }

    module_init(mydevice_init);
    module_exit(mydevice_exit);

method1だと, エントリ関数やハンドラテーブルを定義したりする必要がある. method2だと1行で終わる. 当然2のほうが簡単だが, パラメータ書き換えと同時に何かしら処理する必要がある場合(例えば, i2cで接続されたデバイスのレジスタを変えて見る場合など)には, 方法1にする必要がある.

debugfs経由でパラメータを読み書きしてみる
-------------------------------------------

下記コマンドでビルド, ロードする.

.. code-block:: sh

    make
    sudo insmod MyDeviceModule.ko
    sudo ls /dev/kernel/debug/MyDevice
    >> prm1 _prm1 _prm1_hex

すると, `/sys/kernel/debug/MyDevice` の下に, `prm1`, `_prm1`, `_prm1_hex` が出来ていることが分かる. `prm1` は方法1での実装, `_prm1`, `_prm1_hex` は方法2で実装になる. 全ての同じ変数へアクセスを行う.

.. code-block:: sh

    sudo bash -c 'echo 32 > /sys/kernel/debug/MyDevice/prm1'
    sudo cat /sys/kernel/debug/MyDevice/prm1
    >> 12
    sudo cat /sys/kernel/debug/MyDevice/_prm1
    >> 12
    sudo cat /sys/kernel/debug/MyDevice/_prm1_hex
    >> 0x0000000c

    sudo bash -c 'echo 13 > /sys/kernel/debug/MyDevice/_prm1'
    sudo bash -c 'echo 0x0f > /sys/kernel/debug/MyDevice/_prm1_hex'

その後, cat や echo で読み書きができる. 全て同じ変数の値を入出力をしているので結果はおなじになる. 16進数のときには自動的に0xがつくようである.

* `dentry` : :doc:`./../../Library/Kernel/linux/dcache.h`
* `debugfs_create_dir`, `debugfs_create_file`, `debugfs_create_u32`, `debugfs_create_x32`, `debugfs_remove_recursive` : :doc:`./../../Library/Kernel/linux/debugfs.h`

アクセス権について
====================

これは, ラズパイだけかもしれない.

今回, 各debugfsファイルを作るときに, アクセス権として `S_IRUGO | S_IWUGO` を指定した. これによって全ユーザが読み書きできるはずである. しかし, 実際は実行するときに `sudo` をつける必要がある. これは親ディレクトリである `/sys` 及び `/sys/kernel`, `/sys/kernel/debug` に対して一般ユーザのアクセス権付与されないためである.

これらのディレクトリのマウントオプションを変えることで変更はできるだろう(恐らく起動時に実行されるスクリプトのどこかにある...だろう). しかし, 深くは追わないし, そもそも変えるべきではないだろう.

.. ==============================
.. リンク
.. ==============================

.. _組み込みLinuxデバイスドライバの作り方: https://qiita.com/take-iwiw/items/1ef4b629f9b9bab4d222
