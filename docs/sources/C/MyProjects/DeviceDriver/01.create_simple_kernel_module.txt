=================================
01. Create Simple Kernel Module
=================================

まず, 簡単な カーネルモジュール_ を作成して開発の流れを見てみる.

いわゆる, HelloWorldみたいなものを作る.

参考URLは以下

* 組み込みLinuxデバイスドライバの作り方_

01. 開発の流れ
==================

ざっくりだが本章でお行う流れを書いていく.

1. コードを記述する.
    * カーネルモジュール がロード(insmod)されたときと, アンロード(rmmod)されたときの挙動を記述する(今回は単純にHelloWorld的な出力をするだけ)
2. Makefileを用意する.
    * カーネルモジュールのビルドは勿論自分でgccコマンドを打ってもできるが, インクルードパスの指定などが面倒. :doc:`Introduction` で示した通りビルド用のMakefileがインストールされているので, ソースファイル名を指定してそのMakefileを呼び出す.

3. ビルドして実行する.
    * makeしてビルドし, ismodでモジュールロード, rmmodでアンロードした後, dmesgでメッセージを確認してみる. ここでプログラムした出力が得られればOK


02. コードを書く
==================

ファイル名は, test.c とする.

アプリケーション開発の場合, インクルードするヘッダファイルは「stdio.h」や「string.h」などになるだろうが, それらは ユーザ空間_ で使用するライブラリであり, ドライバ開発ではインクルードしない.
代わりに, 「linux/module.h」や「linux/init.h」などをインクルードする.

`module_init` でinsmod用のエントリーポイントを, `module_exit` でrmmod用のエントリーポイントを指定する.
(それぞれのコマンド実行時などに呼び出される. 戻り値に「0」を返すことで, insmodコマンドは成功する. ロード時の処理で何かしらエラーが発生した場合は0以外を返すようにする. rmmmod用のエントリーポイント関数の戻り値は不要.)
それぞれの関数は以下に定義されている.

* module_init, module_exit   : :doc:`./../../Library/Kernel/linux/module.h`

カーネル内では, `printf` は使用できないため(標準ライブラリをインクルードしてないため当然である).
というよりそもそも, カーネル空間で動作するドライバはコンソール画面(標準出力)が無いため使いようがない.
しかし, それではデバッグが大変なため, 代わりに用意されたのが `printk` 関数( :doc:`./../../Library/Kernel/linux/kernel.h` でマクロ定義されている).

`printk` をするときは `\\n` がないと, dmesgのログに出力されないようだ.

わかりやすいように, `#include<linux/kernel.h>` するべきかもしれないが, `module.h` が読み込んでいる各種ヘッダファイルから `printk` 関数にまで到達するパスがあるのだろう. 実行することができる.


03. Makefileを用意する.
==========================

上述したとおり, Makefile内でソースファイル名を指定して対象のMakefileを呼び出す.

Makefileの解説を使用したが, 正直骨が折れる割にほぼテンプレート化しているように見えたので時間があるときにこの欄は記述することにする.

04. ビルドして実行する
==========================

`make` すると, `test.ko` というファイルが出来上がる.
拡張子が「.ko」のファイルは, 動的リンクされるカーネルモジュールを示している.
これを, `insmod` コマンドでこのモジュールのロード, `rmmod` コマンドでこのモジュールのアンロードをすることができる.

以下のコマンドを実行して結果を確認してみる.

::

    make
    sudo insmod test.ko
    sudo rmmod test.ko
    dmesg

dmesgでprintkの結果を確認すると, 実装したコードが実行されていることがわかる.
doc:`./../../Library/Kernel/linux/kernel.h` でも少し触れているが, printkはメモリ上のバッファにその内容を出力する. そのバッファはリングバッファになっているためそのうち上書きされる. dmesgはそのバッファを出力しているだけ.

モジュール関連コマンド
------------------------

雑だが, いくつか示しておく.

::

    lsmod : モジュールの一覧表示
    modprobe : モジュールのロード (依存関係を考える)
    insmod : モジュールのロード (依存関係は考慮しない)
    rmmod : モジュールのアンロード (削除)



用語解説
==========

.. _カーネルモジュール:

**カーネルモジュール**

| マシン起動中にカーネルに機能を追加するための部品. カーネルの機能のうちの多くの部分は, 最初からカーネルに組み込んでおくこともできるし, モジュールとして独立したファイルにしておいて, 必要になったときにカーネルに組み込む事もできる.
| 例えば, 各種デバイスを操作するデバイスドライバなどがそうである.
| ディストリビューションのカーネルは, カーネルが提供するほとんどのドライバをカーネルモジュールとして提供しており, 起動時に読み込むカーネル本体は最小のサイズに押さえている.
| その後に, 必要に応じてモジュールのロードを行っている. これにより,
|
| * 高速な起動
| * カーネルによるメモリ使用量の最小化
| * なるべく多くのデバイスのサポート
|
| を同時に達成している.

.. _ユーザ空間:

**ユーザ空間**

| これはリンクを貼る.

.. ==============================
.. リンク
.. ==============================

.. _組み込みLinuxデバイスドライバの作り方: https://qiita.com/take-iwiw/items/1fdd2e0faaaa868a2db2
